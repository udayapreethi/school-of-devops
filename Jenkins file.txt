
### **What is Jenkins?**  

🔹 **Jenkins** is an **open-source automation server** used for **Continuous Integration (CI) and Continuous Deployment (CD)**. It helps automate the process of building, testing, and deploying software.

---

### **Key Features of Jenkins** 
 
✅ **Automation**                → Reduces manual effort in build & deployment.  
✅ **Plugins Support**           → Over 1,800+ plugins for customization.  
✅ **Distributed Builds**        → Can run jobs on multiple servers (Master-Slave architecture).  
✅ **Integration**               → Works with Git, Docker, Kubernetes, AWS, Maven, etc.  
✅ **Pipeline as Code**          → Uses **Jenkinsfile** to define CI/CD pipelines.  
✅ **Freestyle & Pipeline Jobs** → Supports different job types for flexibility.

---

### **How Jenkins Works?**  
1️⃣ **Developers push code** to Git/GitHub.  
2️⃣ **Jenkins detects changes** and triggers a job.  
3️⃣ **Build Stage** → Compiles code (e.g., using Maven).  
4️⃣ **Test Stage** → Runs unit & integration tests.  
5️⃣ **Deploy Stage** → Deploys to staging or production servers.  

---

### **Jenkins Pipeline Example**
A simple **Jenkinsfile** for a Maven project:

```groovy
pipeline {
    agent any
    stages {
        stage('SCM') {
            steps {
                git branch: 'main',  url: 'https://github.com/udayapreethi/Maven_Project.git'
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
    }
}
```

---

### **Why Use Jenkins?**
- 🌟 **Automates CI/CD processes** for faster software releases.
- 🔄 **Improves Code Quality** by running automated tests.
- 🔗 **Integrates with DevOps tools** like Docker, Kubernetes, and Ansible.
- 🚀 **Speeds Up Development** with parallel and distributed builds.

====================================================================


Master-Slave Architecture in Jenkins :  Jenkins follows a master-slave to disturibute the jobs across the different machines.by following this there will be parallel execution and proper resoureces utilization and manage the workload.



🔹 Components of Jenkins Master-Slave Architecture:

Jenkins Master (Controller)

The central server responsible for:

Managing jobs and configurations.
Distributing tasks to slaves (agents).
Handling UI, scheduling builds, and managing plugins.

Jenkins Slaves (Agents)

Machines that execute build tasks assigned by the master.
Can be physical or virtual machines.
Supports different operating systems and environments.

🔹 How Master-Slave Works?
Master assigns jobs to slaves based on labels and availability.
Slave executes the assigned task (e.g., building, testing).
Results are sent back to the master for reporting.
Master aggregates reports and displays them in Jenkins UI.


Benefits of Master-Slave Architecture:

✅ parallel Execution → Multiple slaves can run jobs simultaneously.
✅ Load Balancing → Distributes the workload across multiple machines.
✅ Platform Flexibility → Different slaves can run different OS (Windows, Linux, Mac).
✅ Scalability → Easily add more slaves to increase build capacity.

How Master-Slave Works?
Master assigns jobs to slaves based on labels and availability.
Slave executes the assigned task (e.g., building, testing).
Results are sent back to the master for reporting.
Master aggregates reports and displays them in Jenkins UI

Master-Slave vs. Standalone Jenkins
Feature	            Master-Slave Architecture	Standalone Jenkins
Performance	        High (distributed builds)	Low (single system)
Scalability         Easily add slaves	        Limited by machine
Parallel Execution	 Yes	                    No
Load Balancing	     Yes	                    No

======================================================
### **Upstream & Downstream Pipelines in Jenkins**  

In **Jenkins Pipelines**, **Upstream** and **Downstream** jobs define dependencies between builds:

- **Upstream Pipeline** → A job that triggers another job.  
- **Downstream Pipeline** → A job that is triggered by another job.



## Configuring Upstream & Downstream Jobs in Freestyle Projects**
If using **Freestyle Jobs**, you can:
- Configure a **Post-build action** in the **Upstream job**:
  - `Build other projects` → Select the downstream job.
- In the **Downstream job**, configure:
  - `Build Triggers` → `Build after other projects are built`.


##   Why Use Upstream/Downstream Pipelines?**
✅ **Modularization** → Separates build, test, and deployment.  
✅ **Better Visibility** → Easily track dependencies.  
✅ **Parallel Execution** → Can trigger multiple downstream jobs.  
✅ **Failure Isolation** → Failures in downstream jobs don't affect upstream jobs.




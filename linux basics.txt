
+----------------------------------------------------+
| User Applications (Vim, Docker, Apache, etc.)     |
+----------------------------------------------------+
| Shell (Bash, Zsh, Fish, etc.)                     |  <-- Part of the OS
+----------------------------------------------------+
| System Libraries (glibc, libc, OpenSSL, etc.)     |  <-- Part of the OS
+----------------------------------------------------+
| System Utilities (ls, grep, systemctl, etc.)      |  <-- Part of the OS
+----------------------------------------------------+
| Linux Kernel (Process, Memory, FS, Network)       |  <-- Core of the OS
+----------------------------------------------------+
| Hardware (CPU, RAM, Disk, Network, Peripherals)   |
+----------------------------------------------------+


(a) Hardware Layer

ðŸ”¹ The physical components of the computer (CPU, RAM, disk, network interfaces, etc.).
ðŸ”¹ The OS interacts with hardware using device drivers.
(b) Kernel (Core of Linux OS)

ðŸ”¹ The Linux Kernel is responsible for directly managing system resources, including:

    Process Management â€“ Schedules processes and handles multitasking.

    Memory Management â€“ Allocates and deallocates RAM efficiently.

    Device Drivers â€“ Acts as an interface between software and hardware.

    File System Management â€“ Manages how data is stored and retrieved.

    Network Management â€“ Handles communication between systems.

(c) Shell (Command Line Interface - CLI)

ðŸ”¹ A command interpreter that allows users to interact with the kernel.
ðŸ”¹ Examples: Bash, Zsh, Fish, Dash, Ksh.
ðŸ”¹ Converts user commands into system calls for the kernel.
(d) User Applications

ðŸ”¹ End-user programs like web browsers, text editors, DevOps tools, etc.
ðŸ”¹ Applications interact with the OS using system calls via the shell or GUI.
              
Hardware : combination of cpu,memory and stroage
software: follows the set of instructions ,data or programm used to operate the computers specific tasks.

system software: which controls the core operations of computer such as operating system,device drivers and language processors

applocation software:programmes designed for specific tasks including word processor,web browsers and utility tools. 

operating system: o.s is software programme which konws how to use hardware.It acts as a bridge b/w the users and computers.It is heart of the system.o.s can manage the process management, network, memory management.
With out o.s the computer is useless.
we are giving direct instructions through commands .
eg: windows, linux,macos,android


Device drivers: these are special piece of software in the kernel that let the operating system communicate with the hardware devices like keyboard, printers,hardware.

.acts as a bridge, translating generic os requests into commands the hardware understands.


CLI:command line interface , Text based interface, where you interact with the computer by typing commmands on a keyboard. it doesn't have buttons or pictures , just plain text only

GUI:we can interact through the icons, pictures and buttons with computer.
eg: mobile phone, windows desktop

process management; pm refers to how the linux kernel creates, schedules, manages and terminates the programmes running  in the system.
.starting and stopping of the programme
.keeps tracking the status of the programme like is it running, sleepiing ...


Process Management in Linux
Introduction to Process Management
A process is an instance of a running program. Linux provides multiple utilities to monitor, manage, and control processes effectively. Each process has a unique Process ID (PID) and belongs to a parent process.

Index of Commands Covered
Viewing Processes

ps aux â€“ View all running processes
ps -u username â€“ View processes for a specific user
ps -C processname â€“ Show a process by name
pgrep processname â€“ Find a process by name and return its PID
pidof processname â€“ Find the PID of a running program

Managing Processes
kill PID â€“ Terminate a process by PID
pkill processname â€“ Terminate a process by name
kill -9 PID â€“ Force kill a process
pkill -9 processname â€“ Kill all instances of a process
kill -STOP PID â€“ Stop a running process
kill -CONT PID â€“ Resume a stopped process


Monitoring System Processes
top â€“ Interactive process viewer
htop â€“ User-friendly process viewer (requires installation)
nice -n 10 command â€“ Run a command with a specific priority
renice -n -5 -p PID â€“ Change priority of an existing process

Daemon Process Management
systemctl list-units --type=service â€“ List all system daemons
systemctl start service-name â€“ Start a daemon/service
systemctl stop service-name â€“ Stop a daemon/service
systemctl enable service-name â€“ Enable a service at startup
Memory management: involes handling  the systm RAM

.Allocates memory to programmes when they need.
.freeup memory when they are done.
. virtual memory

CPU and Memory Monitoring
top â€“ Real-time system monitoring
htop â€“ Interactive process viewer (requires installation)
vmstat â€“ Report system performance statistics
free -m â€“ Show memory usage

Disk Monitoring
df -h â€“ Check disk space usage
du -sh /path â€“ Show disk usage of a specific directory
iostat â€“ Display CPU and disk I/O statistics

Network Monitoring
ifconfig â€“ Show network interfaces (deprecated, use ip a)
ip a â€“ Show network interface details
netstat -tulnp â€“ Show active connections and listening ports
ss -tulnp â€“ Alternative to netstat for socket statistics
ping hostname â€“ Test network connectivity
traceroute hostname â€“ Show network path to a host
nslookup domain â€“ Get DNS resolution details

Log Monitoring
tail -f /var/log/syslog â€“ Live monitoring of system logs
journalctl -f â€“ Live system logs for systemd-based distros
dmesg | tail â€“ View kernel logs


File system management:
It is about organizing and controlling access to data stored in the disk.
.handles reading, writing, creating and deleting the files, folders and directories .
.manages the file permissions, provide access to files for person according to their roles.
.controles permissions of the files , so only autorized persons can be accessed.


File and Directory Management

ls â€“ Lists files and directories in the current location.
cd /path/to/directory â€“ Changes the working directory.
pwd â€“ Prints the current working directory.
mkdir new_folder â€“ Creates a new directory.
rmdir empty_folder â€“ Removes an empty directory.
rm file.txt â€“ Deletes a file.
rm -r folder â€“ Deletes a folder and its contents.
cp file1.txt file2.txt â€“ Copies a file.
cp -r dir1 dir2 â€“ Copies a directory recursively.
mv old_name new_name â€“ Moves or renames a file or directory.

File Viewing and Editing

cat file.txt â€“ Displays file content.
tac file.txt â€“ Displays file content in reverse order.
less file.txt â€“ Opens a file for viewing with scrolling support.
more file.txt â€“ Similar to less, but only moves forward.
head -n 10 file.txt â€“ Displays the first 10 lines of a file.
tail -n 10 file.txt â€“ Displays the last 10 lines of a file.
nano file.txt â€“ Opens a simple text editor. press y to save the changes before exiting and press n to exit without saving
vi file.txt â€“ Opens a powerful text editor.
echo 'Hello' > file.txt â€“ Writes text to a file, overwriting existing content.
echo 'Hello' >> file.txt â€“ Appends text to a file without overwriting.

Network management;Enabling the computer to send or receive the data over a network.
.handles network protocols (TCP/IP)
.manages network devices like wifi-cards,eithernet ports
.controls data transmission and reception
. features like firewalls and routing.


User management;
creating and deleting user acconts
.modifying account details like paswords
.managing group and prcess permissions
.A/c to their wokr or role t enable the permissions to files, solders, system cmmands.

/etc/passwd â€“ Stores user account details.
/etc/shadow â€“ Stores encrypted user passwords.
/etc/group â€“ Stores group information.
/etc/gshadow â€“ Stores secure group details.


linux operating system: linux interacts with the hardware to handles process management, memory management, network management and disk management.

some of the linux distributions are ubuntu, debian, redhart , fedora and alpine


package manager: it is a tool which can automates the process of  software installation, updating,removing the linux server.

ubuntu, debian - apt
redhat,fedora,cents -dnf /yum for older versins

How does it works.....


1.Repositories (Repos):

A package manager fetches software from official repositories (online storage of packages).
Example: Ubuntu gets packages from archive.ubuntu.com.
2.Installing Software:

When you install software, the package manager: âœ… Downloads the package from the repository. âœ… Resolves dependencies (installs additional required software). âœ… Installs and configures the software automatically.
3.Updating Software:

A single command updates all installed packages to the latest version.
4.Removing Software:


Essential Package Manager Commands

APT (Debian, Ubuntu)

sudo apt update         # Update package lists
sudo apt upgrade -y     # Upgrade installed packages
sudo apt install nginx  # Install a package
sudo apt remove nginx   # Remove a package
sudo apt autoremove     # Remove unused dependencies
sudo apt search nginx   # Search for a package

DNF (Fedora, RHEL, CentOS)

sudo dnf check-update   # Check for updates
sudo dnf update         # Update all packages
sudo dnf install nginx  # Install a package
sudo dnf remove nginx   # Remove a package

Pacman (Arch Linux)

sudo pacman -Syu        # Sync and update all packages
sudo pacman -S nginx    # Install a package
sudo pacman -R nginx    # Remove a package

Zypper (OpenSUSE)

sudo zypper refresh     # Refresh package list
sudo zypper update      # Update all packages
sudo zypper install nginx  # Install a package
sudo zypper remove nginx   # Remove a package

ðŸš€ Best Practices for Using Package Managers
âœ… Always update your package list before installing software:
sudo apt update && sudo apt upgrade -y

A repository is a server that stores software packages. When a package manager installs software:

It checks the repository list (e.g., /etc/apt/sources.list in Ubuntu).
It downloads the package and its dependencies.
It installs and configures the software automatically.

























































Open-source: open-source software is softwar with sourcecode that anyone can inspect,modify and enhance.
we can access the sr code of th linux OS.
allowed to run the program for any purpose/usuge
Allowed to change the program working procedure
free to distribute
 
supercomputers
embedded systems
robotic operating systems
satellite communication system
internet of things devices
flight simulators
bitcoin and crytocurrency mining
advanced driver assistance systems(ADAS)

/  : this is a top level directory. It is parent directory for all other directories, it is represented by the forward slash(/).This is call root directory.It is starting poing of OS.


/root â€“ The home directory of the root:  it is home directory for root user(superuser).It provides the working environment for the root user. 
to switch to root user, 'sudo su' or 'sudo -i'.

/home (User personal data):      It is all the non-root users home directiory . It is the home directiory for other users in the linux.it provides a working environment for the other users.
if u create a user in the anyplace, the users can be showed under home directory only.to add or create a new user, the command is 'useradd username'.

/bin binaries:  Which contains all the linux commands. If you gave the command which is not available in the bin, OS doesn't detect that command. It is used by the all users means for root and non-root users(binary files).
eg: ls, touch,cp,mv


/sbin system binaries: It only contains the commands used by the super user(root user).super user binary files.
eg:Essential system utilities needed for system boot and recovery (init, shutdown, fdisk).
Restricted Access: Regular (non-root) users usually donâ€™t have /sbin in their PATH, meaning they must use sudo to run most of these commands.

/boot bootfiles:The /boot directory in Linux operating systems contains the files necessary for booting the system. It is a critical part of the system that holds the kernel, bootloader, and other essential boot-related files.

/etc  Configuration files:   is the central configuration directory for the operating system and installed applications. It contains system-wide configuration files, startup scripts, and settings that define how the system and services behave
Holds Configuration Files: Contains settings for system services, user authentication, network configuration, etc/passwd, userinfo/
Editable by Root: Most files in /etc require superuser (root) privileges to modify.
to gave sudoers permission to the user, go to /etc/sudoers  and vi sudoers, add the username .now the user have permission to create a file or others in the root directiory.

sshd_config: 
------------
The `sshd_config` file configures the SSH server (`sshd`), defining authentication, security policies, connection settings, and access controls.The sshd_config file is the main configuration file for the OpenSSH server (sshd).
Key Directives in sshd_config
Here are some of the most important settings in sshd_config:

Directive	Description	Example
Port	Specifies the SSH listening port (default: 22).	Port 22 (Default) or Port 2222 (Custom)
PermitRootLogin	Controls whether the root user can log in via SSH.	PermitRootLogin no (Disable root login)
PasswordAuthentication	Allows/disables password-based login.	PasswordAuthentication no (Disable password login, use keys instead)
PubkeyAuthentication	Enables public key authentication.	PubkeyAuthentication yes
AllowUsers	Specifies which users can access SSH.	AllowUsers alice bob (Only allow Alice and Bob)
DenyUsers	Specifies users who cannot access SSH.	DenyUsers guest
AllowGroups	Only members of these groups can access SSH.	AllowGroups sshusers
DenyGroups	Members of these groups are denied SSH access.	DenyGroups nogroup
MaxAuthTries	Limits the number of failed login attempts.	MaxAuthTries 3


/usr (User binaries and program data): The /usr directory in Linux stands for "Unix System Resources" and contains user-installed software(commands which are already availble in the linux ), libraries, documentation, and other system resources. It is one of the largest directories in a typical Linux system and is not meant for system-critical files (which are found in /bin, /sbin, and /lib).

/opt â€“ Optional software:  this file holds the additional software installed on the system.A sub-directory is created for each installed software.It is additional directiory for usr/.it is used for installing third-party or add-on software
Used for manually installed software (e.g., proprietary apps like Google Chrome, Zoom,maven and gitcommands).
Usually contains subdirectories for each application.


/dev Device files: It contains the device files like hardisk.The /dev directory in Linux is a special directory that contains device files representing system hardware and virtual devices.Instead of accessing hardware directly, Linux interacts with devices through these special files.
This directory only contains special files, including those relating to the devices. These are virtual files, not physically on the disk.

Some interesting examples of these files are:

/dev/null: can be sent to destroy any file or string
/dev/zero: contains an infinite sequence of 0
/dev/random: contains an infinite sequence of random values

Contains device files for interacting with hardware.
Device files are not actual files but interfaces to kernel drivers.


/var - Variable Data Directory
The /var directory in Linux stores variable (changing) data, such as logs, cache, mail, and temporary files generated by system services and applications. Unlike /etc (which holds static configuration files), the contents of /var frequently change during system operation.


  
/tmp â€“ Temporary files
As the name suggests, this directory holds temporary files. Many applications use this directory to store temporary files. Even you can use directory to store temporary files.

But do note that the contains of the /tmp directories are deleted when your system restarts. Some Linux system also delete files old files automatically so donâ€™ store anything important here.

/lib â€“ Shared libraries
Libraries are basically codes that can be used by the executable binaries. The /lib directory holds the libraries needed by the binaries in /bin and /sbin directories.

Libraries needed by the binaries in the /usr/bin and /usr/sbin are located in the directory /usr/lib.

































The Linux directory structure follows the **Filesystem Hierarchy Standard (FHS)**, which defines the organization of files and directories in a Linux system. Below is a breakdown of the main directories, categorized by their role in different system phases.  

---

## **1. Boot Phase (System Startup)**
These directories are essential for starting the Linux system.  

| Directory | Description | Example |
|-----------|-------------|------------|
| `/boot` | Contains bootloader files, the Linux kernel, and initial RAM disk (initrd/initramfs). | `/boot/vmlinuz-5.15.0-60-generic` (Kernel image) |
| `/sbin` | System binaries for administrative tasks (restricted to root). | `/sbin/fsck` (Filesystem check tool) |
| `/etc` | System configuration files for the OS and services. | `/etc/fstab` (Defines mountable filesystems) |

---

## **2. User Phase (User Interaction and Applications)**
After booting, these directories are used for user programs and files.  

| Directory | Description | Example |
|-----------|-------------|------------|
| `/home` | Stores personal files for users. | `/home/user/Documents/report.pdf` |
| `/bin` | Essential binaries accessible by all users. | `/bin/ls` (Lists files in a directory) |
| `/usr` | Contains installed software and libraries for user applications. | `/usr/bin/firefox` (Firefox browser) |

---

## **3. System Operation Phase (Processes and Resources Management)**
These directories are used for managing running processes and system resources.  

| Directory | Description | Example |
|-----------|-------------|------------|
| `/var` | Stores variable data like logs, cache, and temporary files. | `/var/log/syslog` (System log file) |
| `/proc` | Virtual filesystem containing runtime system information. | `/proc/cpuinfo` (CPU details) |
| `/sys` | Provides information about hardware and devices. | `/sys/class/net/eth0` (Network interface details) |

---

## **4. Storage & Temporary Files Phase**
These directories are used for mounting, external storage, and temporary files.  

| Directory | Description | Example |
|-----------|-------------|------------|
| `/mnt` | Temporary mount point for external filesystems. | `/mnt/usb` (Mounted USB drive) |
| `/media` | Auto-mounted removable media like USBs and CDs. | `/media/user/MyDrive` |
| `/tmp` | Temporary storage for files, cleared on reboot. | `/tmp/session.log` (Temporary log file) |

---

## **5. System Administration & Security Phase**
Used for system administration, user privileges, and installed software.  

| Directory | Description | Example |
|-----------|-------------|------------|
| `/root` | Home directory for the root user. | `/root/.bashrc` (Shell configuration for root) |
| `/opt` | Third-party applications and add-on software. | `/opt/google/chrome` (Google Chrome installation) |
| `/dev` | Contains device files for hardware. | `/dev/sda1` (Primary disk partition) |
| `/lib` | Shared libraries required for system programs. | `/lib/x86_64-linux-gnu/libc.so.6` |

---

### **Conclusion**
The Linux filesystem is structured to keep system files organized and separated based on their role. Each phase of the system relies on different directories to function properly.

Would you like an in-depth explanation of any specific directory? ðŸš€
